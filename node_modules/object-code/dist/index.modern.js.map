{"version":3,"file":"index.modern.js","sources":["../src/serialize.ts","../src/hash.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/**\n * Serializes any give value into a unique string.\n *\n * @param property The property to Serialize\n * @returns A unique string representation of the property\n */\nexport function serialize<T>(value?: T): string {\n  const type = typeof value;\n\n  if (value && type == 'object' && !(value instanceof Date || value instanceof RegExp)) {\n    const copy = (Array.isArray(value) ? [] : {}) as Record<keyof T, string>;\n\n    for (const key in value) {\n      copy[key] = serialize(value[key]);\n    }\n\n    return `${\n      //@ts-expect-error ignore if not present\n      value.constructor\n    }${JSON.stringify(copy, Object.keys(value).sort())}`;\n  }\n\n  return `${type}${String(value)}`;\n}\n","import { serialize } from './serialize';\n\n/**\n * Hashes an value into a signed integer.\n *\n * Inspired from `string-hash` package.\n *\n * @param val The value to be hashed\n * @returns The signed integer result from the provided value\n * @see https://www.npmjs.com/package/string-hash\n */\nexport function hash(val?: unknown): number {\n  val = serialize(val);\n\n  let hash = 5381;\n  let index = 0;\n\n  while (index < (val as string).length) {\n    hash = (hash * 33) ^ (val as string).charCodeAt(index++);\n  }\n\n  return hash;\n}\n"],"names":["serialize","value","type","Date","RegExp","copy","Array","isArray","key","constructor","JSON","stringify","Object","keys","sort","String","hash","val","index","length","charCodeAt"],"mappings":"SAQgBA,EAAaC,GAC3B,MAAMC,SAAcD,EAEpB,GAAIA,GAAiB,UAARC,KAAsBD,aAAiBE,MAAQF,aAAiBG,QAAS,CACpF,MAAMC,EAAQC,MAAMC,QAAQN,GAAS,GAAK,GAE1C,IAAK,MAAMO,KAAOP,EAChBI,EAAKG,GAAOR,EAAUC,EAAMO,IAG9B,SAEEP,EAAMQ,cACLC,KAAKC,UAAUN,EAAMO,OAAOC,KAAKZ,GAAOa,UAG7C,SAAUZ,IAAOa,OAAOd,cCbVe,EAAKC,GACnBA,EAAMjB,EAAUiB,GAEhB,IAAID,EAAO,KACPE,EAAQ,EAEZ,KAAOA,EAASD,EAAeE,QAC7BH,EAAe,GAAPA,EAAcC,EAAeG,WAAWF,KAGlD,OAAOF"}